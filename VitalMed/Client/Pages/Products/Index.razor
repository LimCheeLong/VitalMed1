@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">List of products</h3>

<link rel="stylesheet" type="text/css" href="/css/Product.css" />

@if (Products == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
                <th>Price</th>
                <th></th>
                <th>View Item</th>
                <th></th>
                <th>Add to cart</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
            <tr>
                <td>@product.ProductName</td>
                <td>@product.ProductDesc</td>
                <th></th>
                <td>$@product.ProductPrice</td>
                <th></th>
                <td>
                    <a href="products/view/@product.ProductName" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                </td>
                <td></td>
                <td>
                    <a href="/products/add/@product.ID" class="btn btn-warning">
                        <span class="oi oi-cart"></span>
                    </a>
                </td>
            </tr>
            }
    </tbody>
</table>
}

@code {
    private List<Product> Products;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

    async Task Delete(int productID)
    {
        var product = Products.First(q => q.ID == productID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productID}");
            await OnInitializedAsync();
        }
    }
}