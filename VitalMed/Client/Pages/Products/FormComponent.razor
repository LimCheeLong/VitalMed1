@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
@using VitalMed.Client.Pages.Products

<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <label>Product Name</label>
        <div>
            <InputText @bind-Value="@product.ProductName" class="form-control" />
            <ValidationMessage For="@(()=>product.ProductName)" />
        </div>
    </fieldset>

    <fieldset disabled="@Disabled">
        <label>Product Price</label>
        <div>
            <InputNumber @bind-Value="@product.ProductPrice" class="form-control" />
            <ValidationMessage For="@(()=>product.ProductPrice)" />
        </div>
    </fieldset>

    <fieldset disabled="@Disabled">
        <label>Product Description</label>
        <div>
            <InputText @bind-Value="@product.ProductDesc" class="form-control" />
            <ValidationMessage For="@(()=>product.ProductDesc)" />
        </div>
    </fieldset>

    <fieldset disabled="@Disabled">
        <label>Product Category</label>
        <div>
            <InputSelect @bind-Value="@product.CId" class="form-control">
                <option value="">--Select Category--</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.ID">@category.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(()=> product.CId)" />
        </div>
    </fieldset>

    <fieldset disabled="@Disabled">
        <label>Product Image</label>
        <div>
            <InputText @bind-Value="@product.ProductImage" class="form-control" />
            <ValidationMessage For="@(()=>product.ProductImage)" />
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="products"/>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
