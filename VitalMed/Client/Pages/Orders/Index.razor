@page "/orders/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Orders</h3>

@if (Orders == null)
{
<div class="alert alert-info">Loading Orders...</div>
}
else
{}
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Order No.</th>
            <th>Item</th>
            <th>Delete Order</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var order in Orders)
        {
        <tr>
            <td>@order.ID</td>
            <td>@order.Cart.Product.ProductName</td>

            <td>
                <!--image link is stored in product.ProductImage, which is a string variable-->
                <img style="width:100px;height:100px" src="@order.Cart.Product.ProductImage" />
            </td>
       

            <td>
                <button class="btn btn-danger" @onclick="@(()=>Delete(order.ID))">
                    <span class="oi oi-delete"></span>
                </button>
            </td>
        </tr>
        }
    </tbody>

</table>
}

@code {
    private List<Order>
    Orders;

    protected async override Task OnInitializedAsync()
    {
    _interceptor.MonitorEvent();
    Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }

    async Task Delete(int orderID)
    {
        var order = Orders.First(q => q.ID == orderID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.ID}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrdersEndpoint}/{orderID}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#ordersTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#ordersTable");
        _interceptor.DisposeEvent();
    }
}
